// 1) variabili SCSS
// ci permettono di creare valori che utilizzeremo pi√π volte in punti differenti del nostro codice
// il vantaggio √® poter cambiare l'origine del valore in un unico punto e vedere l'effetto propagarsi a tutti gli elementi che lo utilizzavano

$size-0: 0;
$size-1: 0.25rem;
$size-2: 0.5rem;
$size-3: 1rem;
$size-4: 1.5rem;
$size-5: 3rem;

$font-sans-serif: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;
$font-serif: Georgia, "Times New Roman", Times, serif;

$main-color: rgb(197, 0, 141);
$secondary-color: rgb(128, 0, 197);
$accent-color: rgb(218, 142, 0);
$color-gray: rgb(100, 86, 108);
$color-white: rgb(232, 218, 240);
$color-body: rgb(26, 0, 39);
$color-bg-body: rgb(59, 0, 89);

// tutte le variabili e funzionalit√† specifiche di SCSS NON si propagheranno al CSS finale
*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  margin: $size-0;
  font-family: $font-sans-serif;
  color: $color-body;
  line-height: 1.4;
}

h1,
h2,
h3,
h4,
h5,
h6,
.h1,
.h2,
.h3,
.h4,
.h5,
.h6 {
  // propriet√† composte
  font: {
    family: $font-serif;
    weight: 800;
  }

  margin-top: $size-0;
}

p {
  margin-top: $size-0;
}

// regole vuote non verranno compilate nella versione finale
// main {
// }

// main section {
//   padding-block: $size-5;
//   color: $color-white;

//   background: {
//     color: $secondary-color;
//   }
// }

// main section ul {
//   padding: $size-0;
// }

// main section ul li {
//   display: inline-block;
// }

// riscriviamo questo codice in forma pi√π ottimizzata

// 2) NESTING CSS - Selettori annidati

header {
  background-color: $accent-color;

  display: flex;
  align-items: center;
  padding-inline: $size-3;
  padding-block: $size-2;

  span {
    margin-right: auto;
  }
  nav {
    ul {
      margin: $size-0;
      li {
        display: inline-block;
      }
    }
  }
}

.main-context {
  padding: $size-3;

  &--section {
    padding-inline: $size-3;
    padding-block: $size-5;
    color: $color-white;

    background-color: $secondary-color;

    // 3) PARENT SELECTOR (&) - riprende il selettore del contesto in cui √® inserito. TUTTI I SELETTORI PIU' ESTERNI

    &:nth-of-type(2) {
      background-color: $color-bg-body;
      color: $color-white;
    }

    &:hover {
      background-color: $main-color;
    }
    // NESTED MEDIA QUERIES
    @media screen and (min-width: 768px) {
      padding-block: 4rem;
    }

    @media screen and (min-width: 992px) {
      padding-block: 5rem;
    }

    ul {
      padding: $size-0;
      li {
        display: inline-block;

        &:hover {
          font-size: 1.6rem;
          background-color: $color-bg-body;
        }
      }
    }
    &--button {
      display: inline-block;
      border-radius: 3px;
      padding: 7px 12px;
      border: 1px solid #d5d5d5;
      background-image: linear-gradient(#eee, #ddd);
      font: 700 13px/18px Helvetica, arial;

      &--state-success {
        color: #fff;
        background: #569e3d linear-gradient(#79d858, #569e3d) repeat-x;
        border-color: #4a993e;
      }

      &--state-danger {
        color: #900;
      }
    }
  }
}

footer {
  section {
    ul {
      li {
        &::marker {
          content: "üìå";
        }
      }
    }
  }
}

.btn {
  background-color: $color-body;
  color: $color-white;
  padding: $size-1 $size-3;
  font: {
    size: 1.2rem;
    family: inherit;
    weight: 500;
  }

  border: 1px solid $secondary-color;
  border-radius: 6px;
}

// 4) EXTEND (@extend) - con questa keyword saremo in grado di riprendere tutta una definizione precedente di classi / id / elementi

.btn-alt {
  @extend .btn;
  background-color: $accent-color;
  border-color: $main-color;
}

// 5) PLACEHOLDER (%) - serve a creare dei blocchi di regole CSS che verranno applicate SOLO nel momento di utilizzo del placerholder stesso
// se mai verr√† usato il placeholder, queste regole non si progheranno mai nel CSS finale
// i placeholder da soli non hanno una loro presenza fisica nel CSS. devono venire usati.

%reset-btn {
  border: none;
  background-color: transparent;
}

%reset-font {
  font: {
    family: inherit;
    weight: inherit;
    size: inherit;
  }
  color: inherit;
}

.btn-basic {
  @extend %reset-btn, %reset-font;

  font-weight: 600;
  border: 2px solid $accent-color;
}

input,
textarea,
select {
  @extend %reset-font;
}

// 6) MIXINS (@mixin) - un blocco di codice CSS DINAMICO, pu√≤ generarsi anche con valori derivanti da parametri

// possiamo impostare un default applicandogli un valore iniziale: $parametro: valoreDefault
@mixin myBox($borderWidth, $boxColor: paleturquoise, $radius: 12px) {
  width: 200px;
  height: 200px;
  display: inline-block;
  vertical-align: bottom;
  margin-block: 2rem;
  border: $borderWidth solid scale-color($boxColor, $lightness: -45%);
  border-radius: $radius;
  background-color: $boxColor;
  box-shadow: 0 3px 30px scale-color($boxColor, $lightness: -80%);
}

// una volta definito, il mixin con le sue regole andr√† utilizzato andandolo ad includere dentro un selettore (@include)

.box-1 {
  @include myBox(2px, $main-color, 10px);
}

.box-2 {
  @include myBox(4px, palevioletred, 4px);
}

// in SASS possiamo specificare il singolo parametro andando ad utilizzare il suo nome proprio per valorizzarlo, dandoci quindi la possibilit√† di "saltare posizioni"
.box-3 {
  @include myBox(4px, $boxColor: palegreen);
}

@mixin dynamicSquare($size, $propertyName, $propertyValue) {
  width: $size;
  height: $size;

  margin-block: 2rem;
  display: inline-block;
  vertical-align: bottom;
  border: 2px solid black;

  // INTERPOLAZIONE DI VALORE #{} - la propriet√† viene composta con il valore dinamico contenuta nel parametro
  // (che pu√≤ essere qualsiasi valore valido per la propriet√† backround-*)

  background-#{$propertyName}: $propertyValue;

  // CONDIZIONALI @if{} @else {}
  // questo sistema pu√≤ essere utile per dinamicizzare ulteriormente il risultato del mixin
  // applicando in alcuni casi delle propriet√† che non si applicano in altri casi e viceversa

  @if ($propertyName == "image") {
    background-size: cover;
  } @else {
    border-radius: 20px;
  }
}

.box-4 {
  @include dynamicSquare(200px, "color", coral);
}

.box-5 {
  @include dynamicSquare(200px, "image", url(https://images.unsplash.com/photo-1735299362091-33c94b71a758?q=80&w=2072&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D));
}

// 7) CICLI
// come per JS anche qui abbiamo le strutture cicliche. Ce ne sono di due tipi:

// CICLO FOR

// @for $contatore from <start> to <end> ==> dove <start> to <end> implica che TO si riferisce al valore <end> ESCLUSO, es. 0 to 5 ==> equivale a 0 < 5
// @for $contatore from <start> through <end> ==> dove <start> through <end> implica che THROUGH si riferisce al valore <end> INCLUSO, es. 0 through 5 ==> equivale a 0 <= 5

@for $i from 1 through 20 {
  .custom-padding-#{$i} {
    padding: $i * 10px;
  }
}

// CICLO EACH

// @each $variabile in [list] {
// CSS TO CREATE
// }

// LISTE - esiste un valore possibile, la lista, che sono valori separati da virgole a formare una lista di valori omogenei

$colorKeys: red, green, blue, yellow, purple, orange, palegoldenrod;

@each $color in $colorKeys {
  .square-#{$color} {
    width: 100px;
    height: 100px;
    background-color: $color;
  }
}

// $colorKeysHEX: #ff0000, #008000, #0000ff, #ffff00, #800080;

// MAPPE - le mappe sono coppie chiave-valore
$colorMap: (
  red: #ff0000,
  green: #008000,
  blue: #0000ff,
  yellow: #ffff00,
  purple: #800080
);

@each $key, $color in $colorMap {
  .square-#{$key} {
    width: 100px;
    height: 100px;
    background-color: $color;
  }
}

$sizes: (
  xs: 10px,
  sm: 20px,
  md: 30px,
  lg: 60px,
  xl: 120px,
  xxl: 240px
);

@each $key, $value in $sizes {
  .padding-#{$key} {
    padding: $value;
    &-inline {
      padding-inline: $value;
    }
    &-block {
      padding-block: $value;
    }
  }
}
